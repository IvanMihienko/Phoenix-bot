const { Keyboard } = require('grammy');
const fs = require('fs');
const path = require('path');

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞.
 * @returns {Array<Object>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—á—ë—Ç—á–∏–∫–æ–≤.
 */
function loadCounters() {
    const filePath = path.join(__dirname, 'CountersList.json');
    const data = fs.readFileSync(filePath, 'utf-8');
    return JSON.parse(data).counters;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
 * @returns {Keyboard} –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
 */
function createMainKeyboard() {
    return new Keyboard()
        .text("üìã –ü—Ä–æ—Ñ–∏–ª—å").text("üóÇ –ó–∞–¥–∞–Ω–∏—è").row()
        .text("üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å").text("üßÆ –°—á—ë—Ç—á–∏–∫ –ü–æ–±–µ–¥").row()
        .resized();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è.
 * @returns {Keyboard} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.
 */
function createProfileKeyboard() {
    return new Keyboard()
        .text("üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é").text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞").row()
        .text("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è").text("üìä –†–µ–π—Ç–∏–Ω–≥").row()
        .resized();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
 * @returns {Keyboard} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
 */
function createSettingsKeyboard() {
    return new Keyboard()
        .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å").row()
        .requestLocation("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º").row()
        .resized();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
 * @returns {Keyboard} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞.
 */
function createTestCompletionKeyboard() {
    return new Keyboard()
        .text("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç").row()
        .resized();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.
 * @param {Array<string>} testFiles - –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤.
 * @returns {Keyboard} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤.
 */
function createListTestKeyboard(testFiles) {
    const keyboard = new Keyboard();
    testFiles.forEach(testName => {
        keyboard.text(testName).row();
    });
    return keyboard.resized();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
 * @returns {Keyboard} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
 */
function createLocationButton() {
    return new Keyboard()
        .requestLocation("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º").row()
        .resized();
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–°—á—ë—Ç—á–∏–∫ –ø–æ–±–µ–¥".
 * @returns {Keyboard} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–°—á—ë—Ç—á–∏–∫ –ø–æ–±–µ–¥".
 */
function createCountersKeyboard() {
    const counters = loadCounters();
    const keyboard = new Keyboard();

    counters.forEach(counter => {
        keyboard.text(counter.name).row();
    });

    keyboard.text("üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é").row();

    return keyboard.resized();
}

module.exports = {
    createMainKeyboard,
    createProfileKeyboard,
    createSettingsKeyboard,
    createTestCompletionKeyboard,
    createListTestKeyboard,
    createLocationButton,
    createCountersKeyboard,
    loadCounters
};
