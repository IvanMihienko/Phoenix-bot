const { Router } = require('@grammyjs/router');
const { STATES, stateFilterMiddleware } = require('./stateManager');
const { createMainKeyboard, createCountersKeyboard, loadCounters } = require('./keyboard');
const { handleStart, sendUserProfile, handleLocation } = require('./handlers/userHandlers');
const { editOrReply, handleTasks, handleSettings, handleBackToMenu, handleAchievements, handleRating } = require('./handlers/generalHandlers');
const { handlePoll, handleAnswer, handleTestCompletion, loadAndStartTest } = require('./handlers/testHandlers');
const { getTestFiles } = require('./getTestFiles');
const { handleCounterCallback, ensureCounterExists, handleCouners, createCounterKeyboard } = require('./counters');
const path = require('path');
const fs = require('fs');

// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const stateRoutes = {
    IDLE: {
        start: { command: '/start', handler: handleStart },
        profile: { text: 'üìã –ü—Ä–æ—Ñ–∏–ª—å', handler: sendUserProfile },
        tasks: { text: 'üóÇ –ó–∞–¥–∞–Ω–∏—è', handler: handleTasks },
        settings: { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞', handler: handleSettings },
        toprofile: { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', handler: sendUserProfile },
        backtomenu: { text: 'üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', handler: handleBackToMenu },
        achievements: { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', handler: handleAchievements },
        rating: { text: 'üìä –†–µ–π—Ç–∏–Ω–≥', handler: handleRating },
        poll: { text: 'üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', handler: handlePoll },
        counters: { text: 'üßÆ –°—á—ë—Ç—á–∏–∫ –ü–æ–±–µ–¥', handler: handleCouners },
    },
    TESTING: {
        completeTest: { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', handler: handleTestCompletion },
        start: { command: '/start', handler: handleTestCompletion },
    },
    REGISTRATION: {
        start: { command: '/start', handler: handleStart },
    },
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞
const countersRoutes = loadCounters();

countersRoutes.forEach(({ name, id }) => {
    stateRoutes.IDLE[id] = {
        text: name,
        handler: async (ctx) => {
            const user = await ensureCounterExists(ctx.db, ctx.from.id, id);
            const currentValue = user.counters[id] || 0;
            await ctx.reply(`–°—á—ë—Ç—á–∏–∫ "${name}": ${currentValue}`, {
                reply_markup: createCounterKeyboard(id, currentValue),
            });
        },
    };
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
getTestFiles().forEach((testName) => {
    if (!stateRoutes.IDLE) stateRoutes.IDLE = {};
    stateRoutes.IDLE[testName] = {
        text: testName,
        handler: async (ctx) => {
            console.log(`–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
            await loadAndStartTest(ctx, testName);
        },
    };
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
const router = new Router((ctx) => {
    const messageText = ctx.message?.text;
    const userState = ctx.session?.state || 'IDLE';

    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageText}" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: "${userState}"`);

    const stateConfig = stateRoutes[userState];
    if (stateConfig) {
        for (const [key, route] of Object.entries(stateConfig)) {
            if (
                (route.command && messageText === route.command) ||
                (route.text && messageText === route.text)
            ) {
                console.log(`–ú–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω: ${key}`);
                return key;
            }
        }
    }

    console.log(`–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${messageText}"`);
    return 'unknown';
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
Object.entries(stateRoutes).forEach(([state, routes]) => {
    Object.entries(routes).forEach(([key, route]) => {
        router.route(key, stateFilterMiddleware(), async (ctx) => {
            console.log(`–í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞: ${key}`);
            if (typeof route.handler === 'function') {
                try {
                    await route.handler(ctx);
                    console.log(`–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ${key} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.`);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${key}:`, error);
                    await editOrReply(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.', {
                        reply_markup: createMainKeyboard(),
                    });
                }
            } else {
                console.error(`–û—à–∏–±–∫–∞: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${key} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π.`);
                await editOrReply(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', {
                    reply_markup: createMainKeyboard(),
                });
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –≤ router.otherwise
router.otherwise(stateFilterMiddleware(), async (ctx) => {
    const telegramId = ctx.from?.id;
    const userState = ctx.session?.state || 'IDLE';

    console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: ${userState}`);


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è REGISTRATION
    if (userState === 'REGISTRATION') {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ REGISTRATION –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
        await handleLocation(ctx);
        return;
    }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è IDLE
    if (userState === 'IDLE' && ctx.message?.location) {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ IDLE`);
        await handleLocation(ctx);
        return;
    }
    if (userState === 'IDLE' && ctx.callbackQuery) {
        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query: ${ctx.callbackQuery.data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`);
        await handleCounterCallback(ctx);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TESTING
    if (userState === 'TESTING') {
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –≤–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        await handleAnswer(ctx);
        return;
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', {
        reply_markup: createMainKeyboard(),
    });
});


module.exports = router;
