const { createMainKeyboard, createProfileKeyboard, createSettingsKeyboard, createLocationButton, createTestCompletionKeyboard, createListTestKeyboard } = require('../keyboard');

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ, –µ—Å–ª–∏ —ç—Ç–æ callback_query.
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {Object} options - –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
async function editOrReply(ctx, text, options) {
    if (ctx.callbackQuery) {
        try {
            await ctx.editMessageText(text, options);
        } catch (error) {
            await ctx.reply(text, options);
        }
    } else {
        await ctx.reply(text, options);
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 * @param {number} health - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è (–æ—Ç 0 –¥–æ 4).
 * @returns {string} –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è.
 */
function renderHealth(health) {
    const fullHeart = '‚ù§Ô∏è';
    const emptyHeart = 'üñ§';
    return fullHeart.repeat(health) + emptyHeart.repeat(4 - health);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫.
 * @param {string} errorMessage - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.
 * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
 */
function formatErrorMessage(errorMessage) {
    return `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.
 * @param {Function} fn - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
 * @returns {Function} –û–±–µ—Ä—Ç–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
 */
function withErrorHandling(fn) {
    return async (ctx, ...args) => {
        try {
            await fn(ctx, ...args);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', error);
            await ctx.reply(formatErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
        }
    };
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π".
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
 */
async function handleTasks(ctx) {
    await editOrReply(ctx, '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', {
        reply_markup: createMainKeyboard(),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É "–ù–∞—Å—Ç—Ä–æ–π–∫–∏".
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
 */
async function handleSettings(ctx) {
    await editOrReply(ctx, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
        reply_markup: createSettingsKeyboard(),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é".
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
 */
async function handleBackToMenu(ctx) {
    await editOrReply(ctx, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: createMainKeyboard(),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
 */
async function handleAchievements(ctx) {
    await editOrReply(ctx, '–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', {
        reply_markup: createProfileKeyboard(),
    });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥.
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
 */
async function handleRating(ctx) {
    await editOrReply(ctx, '–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:', {
        reply_markup: createProfileKeyboard(),
    });
}

module.exports = {
    editOrReply,
    renderHealth,
    formatErrorMessage,
    withErrorHandling,
    handleTasks,
    handleSettings,
    handleBackToMenu,
    handleAchievements,
    handleRating,
};
